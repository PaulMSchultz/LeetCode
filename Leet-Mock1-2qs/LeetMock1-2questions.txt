//to see if i can win the nim game by going first.
// if there are 1-3 stones first i can pick them up to win
// if there are 4 stones, i can pick up from 1-3, so i will always lose
// n%4 helps me see if i can even win a game based on input number of stones

public class Solution {
    public bool CanWinNim(int n) {
        int x = 0;
        if (n == 4)
        {
            return false;
        }
        else if (x == n % 4)
        {
            return false;
        }
        else if (n > 4 | n < 4) 
        {
            return true;
        }
        else
        {
            return true;
        }
    }
}

// hamming distance is the number of positions at which the input numbers' bits are different
// example 1 is 0001 and 4 is 0100, the answer is two.
// XOR (a0b), then count the number of 1's in the resulting string
// strings must be of equal length
// this assumes x>=0 and y<2^31

public class Solution
{
    public int HammingDistance(int x, int y)
    {
        string num1 = Convert.ToString(x,2);
		string num2 = Convert.ToString(y,2);
		num1 = num1.PadLeft(32, '0');
		num2 = num2.PadLeft(32, '0'); 
		
		int total = 0;
		for(int i = 0; i < num1.Length; i++)
		{
			if(num1[i] != num2[i])
				total += 1;
		}
		
		return total;
	}
}